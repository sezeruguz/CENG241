#include <iostream>
#include <numeric> // for std::gcd
using namespace std;

class Rational {
private:
    int numerator;   // Numerator
    int denominator; // Denominator

    // Helper function to simplify the fraction
    void simplify() {
        int gcd = std::gcd(numerator, denominator);
        numerator /= gcd;
        denominator /= gcd;
        // Keep the denominator positive
        if (denominator < 0) {
            numerator = -numerator;
            denominator = -denominator;
        }
    }

public:
    // Default constructor (0/1)
    Rational() : numerator(0), denominator(1) {}

    // Parameterized constructor
    Rational(int num, int denom) : numerator(num), denominator(denom) {
        if (denominator == 0) {
            throw invalid_argument("Denominator cannot be zero!");
        }
        simplify();
    }

    // Getter and Setter functions
    int getNumerator() const { return numerator; }
    int getDenominator() const { return denominator; }
    void setNumerator(int num) { numerator = num; simplify(); }
    void setDenominator(int denom) {
        if (denom == 0) {
            throw invalid_argument("Denominator cannot be zero!");
        }
        denominator = denom;
        simplify();
    }

    // Overloading the addition operator
    Rational operator+(const Rational &other) const {
        int num = numerator * other.denominator + other.numerator * denominator;
        int denom = denominator * other.denominator;
        return Rational(num, denom);
    }

    // Overloading the subtraction operator
    Rational operator-(const Rational &other) const {
        int num = numerator * other.denominator - other.numerator * denominator;
        int denom = denominator * other.denominator;
        return Rational(num, denom);
    }

    // Overloading the multiplication operator
    Rational operator*(const Rational &other) const {
        int num = numerator * other.numerator;
        int denom = denominator * other.denominator;
        return Rational(num, denom);
    }

    // Overloading the division operator
    Rational operator/(const Rational &other) const {
        if (other.numerator == 0) {
            throw invalid_argument("Division by zero error!");
        }
        int num = numerator * other.denominator;
        int denom = denominator * other.numerator;
        return Rational(num, denom);
    }

    // Overloading the equality operator
    bool operator==(const Rational &other) const {
        return (numerator == other.numerator && denominator == other.denominator);
    }

    // Overloading the << operator for output
    friend ostream& operator<<(ostream &out, const Rational &r) {
        out << r.numerator << "/" << r.denominator;
        return out;
    }

    // Overloading the >> operator for input
    friend istream& operator>>(istream &in, Rational &r) {
        cout << "Enter the numerator: ";
        in >> r.numerator;
        cout << "Enter the denominator: ";
        in >> r.denominator;
        if (r.denominator == 0) {
            throw invalid_argument("Denominator cannot be zero!");
        }
        r.simplify();
        return in;
    }
};

int main() {
    try {
        Rational r1(3, 4);    // 3/4
        Rational r2(5, 6);    // 5/6

        // Addition
        Rational sum = r1 + r2;
        cout << "Sum: " << sum << endl;

        // Subtraction
        Rational diff = r1 - r2;
        cout << "Difference: " << diff << endl;

        // Multiplication
        Rational product = r1 * r2;
        cout << "Product: " << product << endl;

        // Division
        Rational quotient = r1 / r2;
        cout << "Quotient: " << quotient << endl;

        // Equality check
        if (r1 == r2)
            cout << "r1 and r2 are equal." << endl;
        else
            cout << "r1 and r2 are not equal." << endl;

        // Input from the user
        Rational r3;
        cin >> r3;
        cout << "You entered: " << r3 << endl;

    } catch (const invalid_argument &e) {
        cerr << "Error: " << e.what() << endl;
    }

    return 0;
}
